@page "/usermanagement"
@using blaz3.Model
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<style>
    body {
        background-color: #f8f9fa; /* Светлый фон */
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
    }

    .container {
        max-width: 1100px; /* Увеличенная ширина контейнера */
        margin: auto;
        padding: 30px;
        background-color: #ffffff; /* Белый фон */
        border-radius: 15px; /* Закругленные углы */
        box-shadow: 0 6px 25px rgba(0, 0, 0, 0.1); /* Тень */
    }

    h3, h4 {
        color: #6f42c1; /* Фиолетовый цвет */
        text-align: center;
        margin-bottom: 25px;
    }

    .user-list {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Сетка карточек */
        gap: 20px; /* Расстояние между карточками */
        margin-top: 20px;
    }

    .user-card {
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); /* Тень карточки */
        padding: 20px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .user-card:hover {
            transform: scale(1.03); /* Легкое увеличение карточки */
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        }

    .user-info {
        margin-bottom: 15px;
    }

        .user-info p {
            margin: 5px 0;
            font-size: 14px;
            color: #333;
        }

            .user-info p span {
                font-weight: bold;
                color: #6f42c1;
            }

    .user-actions {
        display: flex;
        justify-content: space-between;
    }

    .btn-warning,
    .btn-danger {
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        font-size: 13px;
        font-weight: 600;
        color: white;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .btn-warning {
        background-color: #ffc107; /* Желтый цвет */
    }

        .btn-warning:hover {
            background-color: #e0a800;
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(255, 193, 7, 0.3);
        }

    .btn-danger {
        background-color: #dc3545; /* Красный цвет */
    }

        .btn-danger:hover {
            background-color: #b52a37;
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
        }

    .btn-add-user {
        background-color: #6f42c1; /* Фиолетовый цвет */
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 14px;
        font-weight: 600;
        color: white;
        cursor: pointer;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .btn-add-user:hover {
            background-color: #5a34a3; /* Темно-фиолетовый цвет при наведении */
            transform: scale(1.05); /* Легкое увеличение */
            box-shadow: 0 4px 15px rgba(111, 66, 193, 0.3); /* Тень при наведении */
        }
</style>

<div class="container">
    <h3>Управление пользователями</h3>
    <h4>Список пользователей</h4>

    <div class="user-list">
        @foreach (var user in users)
        {
            <div class="user-card">
                <div class="user-info">
                    <p><span>Email:</span> @user.Email</p>
                    <p><span>Имя:</span> @user.Name</p>
                    <p><span>Описание:</span> @user.Description</p>
                    <p><span>Пароль:</span> @user.Password</p>
                    <p><span>Роль:</span> @user.Role</p>
                </div>
                <div class="user-actions">
                    <button @onclick="() => EditUser(user)" class="btn-warning">Редактировать</button>
                    <button @onclick="() => DeleteUser(user.Id)" class="btn-danger">Удалить</button>
                </div>
            </div>
        }
    </div>
    <h4>@(isEditing ? "Редактировать пользователя" : "Добавить нового пользователя")</h4>
    <EditForm Model="newUser" OnValidSubmit="isEditing ? HandleUpdateUser : HandleCreateUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <InputText @bind-Value="newUser.Name" placeholder="Имя" class="form-control" />
        </div>
        <div class="form-group">
            <InputText @bind-Value="newUser.Email" placeholder="Email" class="form-control" />
        </div>
        <div class="form-group">
            <InputText @bind-Value="newUser.Description" placeholder="Описание" class="form-control" />
        </div>
        <div class="form-group">
            <InputText @bind-Value="newUser.Password" type="password" placeholder="Пароль" class="form-control" />
        </div>
        <div class="form-group">
            <InputSelect @bind-Value="newUser.Role" class="form-control">
                <option value="">Выберите роль</option>
                <option value="Пользователь">Пользователь</option>
                <option value="Администратор">Администратор</option>
            </InputSelect>
        </div>
        <div class="btn-group">
            <button type="submit" class="btn btn-add-user">@((isEditing) ? "Сохранить" : "Добавить пользователя")</button>
            @if (isEditing)
            {
                <button type="button" class="btn btn-secondary" @onclick="ResetForm">Отмена</button>
            }
        </div>
    </EditForm>
</div>



@code {
    private bool isEditing = false;
    private User newUser = new User();
    private List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            var response = await Http.GetAsync("api/User");
            if (response.IsSuccessStatusCode)
            {
                users = await response.Content.ReadFromJsonAsync<List<User>>();
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка загрузки пользователей: {ex.Message}");
        }
    }

    private async Task HandleUpdateUser()
    {
        try
        {
            // Проверяем, что роль корректна
            if (newUser.Role != "Пользователь" && newUser.Role != "Администратор")
            {
                ShowAlert("Роль должна быть либо 'Пользователь', либо 'Администратор'.");
                return;
            }

            var response = await Http.PutAsJsonAsync($"api/User/{newUser.Id}", newUser);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
                ResetForm();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка обновления пользователя: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private async Task HandleCreateUser()
    {
        try
        {
            // Проверяем, что роль корректна
            if (newUser.Role != "Пользователь" && newUser.Role != "Администратор")
            {
                ShowAlert("Роль должна быть либо 'Пользователь', либо 'Администратор'.");
                return;
            }

            var response = await Http.PostAsJsonAsync("api/User", newUser);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
                ResetForm();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка добавления пользователя: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private void EditUser(User user)
    {
        newUser = user;
        isEditing = true;
    }

    private async Task DeleteUser(int id)
    {
        try
        {
            // Получаем текущего пользователя из localStorage
            var currentUserIdString = await JS.InvokeAsync<string>("localStorage.getItem", "currentUserId");
            if (int.TryParse(currentUserIdString, out var currentId))
            {
                if (id == currentId) // Проверка на текущего пользователя
                {
                    ShowAlert("Вы не можете удалить текущего администратора.");
                    return;
                }
            }

            var response = await Http.DeleteAsync($"api/User/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка удаления пользователя: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private void ResetForm()
    {
        newUser = new User();
        isEditing = false;
    }

    private void ShowAlert(string message)
    {
        JS.InvokeVoidAsync("alert", message);
    }
}