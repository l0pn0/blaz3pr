@page "/usermanagement"
@using blaz3.Model
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<style>
    body {
        background-color: #f9f9f9;
        font-family: 'Arial', sans-serif;
        margin: 0;
        padding: 0;
    }

    .container {
        width: 100%;
        padding: 20px;
        background-color: #ffffff;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        box-sizing: border-box;
    }

    h3, h4 {
        color: #8b00ff;
        text-align: center;
    }

    .table {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

    .table th, .table td {
        padding: 12px;
        border: 1px solid #dee2e6;
        text-align: center;
    }

    .table th {
        background-color: #8b00ff;
        color: white;
    }

    .btn-warning {
        background-color: #ffc107;
        border-color: #ffc107;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .btn-danger:hover,
    .btn-warning:hover {
        opacity: 0.8;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .btn-primary {
        background-color: #8b00ff;
        border-color: #8b00ff;
    }

    .btn-secondary {
        margin-left: 20px;
        background-color: #6c757d;
        border-color: #6c757d;
    }

    .btn-primary:hover,
    .btn-secondary:hover {
        opacity: 0.8;
    }
</style>

<div class="container">
    <h3>Управление пользователями</h3>
    <h4>Список пользователей</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Имя</th>
                <th>Описание</th>
                <th>Пароль</th>
                <th>Роль</th>
                <th>Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>@user.Name</td>
                    <td>@user.Description</td>
                    <td>@user.Password</td>
                    <td>@user.Role</td>
                    <td>
                        <button @onclick="() => EditUser(user)" class="btn btn-warning">Редактировать</button>
                        <button @onclick="() => DeleteUser(user.Id)" class="btn btn-danger">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>@(isEditing ? "Редактировать пользователя" : "Добавить нового пользователя")</h4>
    <EditForm Model="newUser" OnValidSubmit="isEditing ? HandleUpdateUser : HandleCreateUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <InputText @bind-Value="newUser.Name" placeholder="Имя" class="form-control" />
        </div>
        <div class="form-group">
            <InputText @bind-Value="newUser.Email" placeholder="Email" class="form-control" />
        </div>
        <div class="form-group">
            <InputText @bind-Value="newUser.Description" placeholder="Описание" class="form-control" />
        </div>
        <div class="form-group">
            <InputText @bind-Value="newUser.Password" type="password" placeholder="Пароль" class="form-control" />
        </div>
        <div class="form-group">
            <InputText @bind-Value="newUser.Role" type="role" placeholder="Роль" class="form-control" />
        </div>
        <button type="submit" class="btn btn-primary">@((isEditing) ? "Сохранить" : "Добавить пользователя")</button>
        @if (isEditing)
        {
            <button type="button" class="btn btn-secondary" @onclick="ResetForm">Отмена</button>
        }
    </EditForm>
</div>

@code {
    private bool isEditing = false;
    private User newUser = new User();
    private List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        try
        {
            var response = await Http.GetAsync("api/User");
            if (response.IsSuccessStatusCode)
            {
                users = await response.Content.ReadFromJsonAsync<List<User>>();
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка загрузки пользователей: {ex.Message}");
        }
    }

    private async Task HandleUpdateUser()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/User/{newUser.Id}", newUser);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
                ResetForm();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка обновления пользователя: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private async Task HandleCreateUser()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/User", newUser);
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
                ResetForm();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка добавления пользователя: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private void EditUser(User user)
    {
        newUser = user;
        isEditing = true;
    }

    private async Task DeleteUser(int id)
    {
        try
        {
            // Получаем текущего пользователя из localStorage
            var currentUserIdString = await JS.InvokeAsync<string>("localStorage.getItem", "currentUserId");
            if (int.TryParse(currentUserIdString, out var currentId))
            {
                if (id == currentId) // Проверка на текущего пользователя
                {
                    ShowAlert("Вы не можете удалить текущего администратора.");
                    return;
                }
            }

            var response = await Http.DeleteAsync($"api/User/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка удаления пользователя: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private void ResetForm()
    {
        newUser = new User();
        isEditing = false;
    }

    private void ShowAlert(string message)
    {
        JS.InvokeVoidAsync("alert", message);
    }
}