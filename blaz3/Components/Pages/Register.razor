@page "/register"
@using blaz3.Model
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<head>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
</head>

<style>
    body {
        background-color: #f8f9fa; /* Светлый фон */
        font-family: 'Arial', sans-serif; /* Шрифт */
    }

    h4 {
        color: #5e4b8a; /* Цвет заголовка */
        text-align: center; /* Центрирование заголовка */
    }

    .container {
        max-width: 500px; /* Максимальная ширина контейнера */
        margin: auto; /* Центрирование контейнера */
        padding: 40px; /* Отступы внутри контейнера */
        background-color: #fff; /* Белый фон для контейнера */
        border-radius: 10px; /* Закругленные углы */
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); /* Тень для контейнера */
    }

    .form-control {
        border: 1px solid #ced4da; /* Цвет рамки для полей ввода */
        border-radius: 5px; /* Закругленные углы полей ввода */
    }

        .form-control:focus {
            border-color: #6f42c1; /* Цвет рамки при фокусе */
            box-shadow: 0 0 5px rgba(111, 66, 193, 0.5); /* Тень при фокусе */
        }

    .btn-primary {
        background-color: #6f42c1; /* Фон кнопки */
        border: none; /* Убираем границу */
        border-radius: 5px; /* Закругленные углы кнопки */
        color: white; /* Цвет текста кнопки */
        transition: background-color 0.3s; /* Плавный переход */
    }

        .btn-primary:hover {
            background-color: #5e4b8a; /* Цвет кнопки при наведении */
        }

    .btn-link {
        color: #6f42c1; /* Цвет ссылки */
        text-decoration: none; /* Убираем подчеркивание */
    }

        .btn-link:hover {
            text-decoration: underline; /* Подчеркивание при наведении */
        }
</style>

<div class="container mt-5" style="max-width: 700px;">
    <h4 class="text-center mb-4">Регистрация</h4>
    <div class="card">
        <div class="card-body">
            <EditForm Model="newUser" OnValidSubmit="HandleRegister" FormName="RegistrationForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <div class="form-group">
                    <label for="name">Имя</label>
                    <InputText @bind-value="@newUser.Name" id="name" placeholder="Введите ваше имя" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText @bind-value="@newUser.Email" id="email" placeholder="Введите ваш email" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="description">Описание</label>
                    <InputText @bind-value="@newUser.Description" id="description" placeholder="Введите описание" class="form-control" />
                </div>

                <div class="form-group">
                    <label for="password">Пароль</label>
                    <InputText @bind-value="@newUser.Password" id="password" type="password" placeholder="Введите пароль" class="form-control" />
                </div>


                <div class="form-check mb-3">
                    <InputCheckbox @bind-value="isAdmin" class="form-check-input" />
                    <label class="form-check-label">Администратор</label>
                </div>

                <button type="submit" class="btn btn-primary btn-block">Зарегистрироваться</button>
            </EditForm>
        </div>
    </div>

    <div class="text-center mt-4">
        <NavLink href="/counter" class="btn btn-link">Уже зарегистрированы? Войти</NavLink>
    </div>
</div>

@code {

    public User newUser = new User();
    private bool isAdmin = false;

    private async Task HandleRegister()
    {
        try
        {
            if (string.IsNullOrEmpty(newUser.Name) || string.IsNullOrEmpty(newUser.Password) || string.IsNullOrEmpty(newUser.Email))
            {
                ShowAlert("Пожалуйста, введите имя пользователя, пароль и почту.");
                return;
            }

            newUser.Role = isAdmin ? "Администратор" : "Пользователь";

            var response = await Http.PostAsJsonAsync("api/User", newUser);
            if (response.IsSuccessStatusCode)
            {
                newUser = new User();
                isAdmin = false;
                ShowAlert("Регистрация прошла успешно!");
                NavigationManager.NavigateTo("/counter");
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowAlert($"Ошибка регистрации: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private void ShowAlert(string message)
    {
        JS.InvokeVoidAsync("alert", message);
    }
}