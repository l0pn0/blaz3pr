@page "/counter"
@using blaz3.Model
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Авторизация</PageTitle>

<style>
    body {
        background-color: #f8f9fa; /* Светлый фон */
        font-family: 'Arial', sans-serif; /* Шрифт */
    }

    h4 {
        color: #5e4b8a; /* Цвет заголовка */
        text-align: center; /* Центрирование заголовка */
    }

    .container {
        max-width: 500px; /* Максимальная ширина контейнера */
        margin: auto; /* Центрирование контейнера */
        padding: 40px; /* Отступы внутри контейнера */
        background-color: #fff; /* Белый фон для контейнера */
        border-radius: 10px; /* Закругленные углы */
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1); /* Тень для контейнера */
    }

    .form-control {
        border: 1px solid #ced4da; /* Цвет рамки для полей ввода */
        border-radius: 5px; /* Закругленные углы полей ввода */
    }

        .form-control:focus {
            border-color: #6f42c1; /* Цвет рамки при фокусе */
            box-shadow: 0 0 5px rgba(111, 66, 193, 0.5); /* Тень при фокусе */
        }

    .btn-primary {
        background-color: #6f42c1; /* Фон кнопки */
        border: none; /* Убираем границу */
        border-radius: 5px; /* Закругленные углы кнопки */
        color: white; /* Цвет текста кнопки */
        transition: background-color 0.3s; /* Плавный переход */
    }

        .btn-primary:hover {
            background-color: #5e4b8a; /* Цвет кнопки при наведении */
        }

    .btn-link {
        color: #6f42c1; /* Цвет ссылки */
        text-decoration: none; /* Убираем подчеркивание */
    }

        .btn-link:hover {
            text-decoration: underline; /* Подчеркивание при наведении */
        }
</style>

<div class="container mt-5">
    <h4 class="mb-4">Авторизация</h4>

    <EditForm Model="loginUser" OnValidSubmit="HandleLogin" FormName="AuthenticationForm">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger mb-3" />

        <div class="form-group mb-3">
            <label for="email">Email</label>
            <InputText @bind-Value="loginUser.Email" id="email" placeholder="Введите ваш email" class="form-control" />
        </div>

        <div class="form-group mb-3">
            <label for="password">Пароль</label>
            <InputText @bind-Value="loginUser.Password" id="password" type="password" placeholder="Введите пароль" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary w-100">Войти</button>
    </EditForm>

    <div class="text-center mt-4">
        <NavLink href="/register" class="btn btn-link">Еще не зарегистрированы? Регистрация</NavLink>
    </div>
</div>

@code {
    private User loginUser = new User(); // Модель для ввода данных пользователя

    private async Task HandleLogin() // Метод для обработки логина
    {
        try
        {
            if (string.IsNullOrEmpty(loginUser.Email) || string.IsNullOrEmpty(loginUser.Password))
            {
                ShowAlert("Пожалуйста, введите имя пользователя и пароль.");
                return;
            }

            var loginRequest = new LoginRequest
                {
                    Email = loginUser.Email,
                    Password = loginUser.Password
                };

            var response = await Http.PostAsJsonAsync("api/User/authentication", loginRequest); // Отправка данных на сервер

            if (response.IsSuccessStatusCode)
            {
                var user = await response.Content.ReadFromJsonAsync<User>(); // Получение данных пользователя
                if (user != null)
                {
                    int userId = user.Id;
                    await JS.InvokeVoidAsync("localStorage.setItem", "currentUserId", userId); // Сохранение ID пользователя в localStorage
                    await JS.InvokeVoidAsync("localStorage.setItem", "currentUserName", user.Name); // Сохранение имени пользователя

                    string userRole = user.Role;

                    ShowAlert("Авторизация успешна!"); // Уведомление об успешной авторизации

                    switch (userRole) // Навигация в зависимости от роли пользователя
                    {
                        case "Администратор":
                            NavigationManager.NavigateTo("/admin");
                            break;
                        case "Пользователь":
                            NavigationManager.NavigateTo("/userpage");
                            break;
                    }

                    loginUser = new User(); // Сброс формы
                }
                else
                {
                    ShowAlert("Ошибка: не удалось получить данные пользователя.");
                }
            }
            else
            {
                ShowAlert("Вы ввели неправльно email пользователя или его пароль!");
            }
        }
        catch (Exception ex)
        {
            ShowAlert($"Ошибка: {ex.Message}");
        }
    }

    private void ShowAlert(string message) // Метод для отображения уведомлений
    {
        JS.InvokeVoidAsync("alert", message);
    }
}